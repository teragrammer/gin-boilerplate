package application_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gin-boilerplate/database/migration"
	"gin-boilerplate/internal/tester"
	"gin-boilerplate/pkg"
	"gin-boilerplate/pkg/routes"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/assert/v2"
	"mime/multipart"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"
)

type TestRoleModel struct {
	id    uint
	user  migration.User
	token *migration.AuthenticationToken
}

var TestRole = TestRoleModel{}

func TestRoleSetup(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	// reset the mock data
	bootstrap.DB.Where("slug = ?", "test_role").Delete(&migration.Role{})

	// mock authentication
	var user, token = tester.GenerateAuthentication(bootstrap, "admin", "admin_test")
	TestRole.user = user
	TestRole.token = token
}

func TestCreateRoleHttp(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	// Create a new multipart writer
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	// Add other fields
	_ = writer.WriteField("name", "test")
	_ = writer.WriteField("slug", "test_role")
	_ = writer.WriteField("rank", "1")
	_ = writer.WriteField("is_disabled", "0")
	_ = writer.WriteField("is_active", "1")

	// Close multipart writer
	err := writer.Close()
	if err != nil {
		t.Error("Error closing writer:", err)
	}

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/roles", body)
	req.Header.Set("Content-Type", writer.FormDataContentType())
	req.Header.Set("X-Secret-Key", bootstrap.Env.App.Key)
	req.Header.Set("Authorization", TestRole.token.Token)
	bootstrap.Engine.ServeHTTP(w, req)

	type AutoGenerated struct {
		Data int `json:"data"`
	}

	var data AutoGenerated
	res := w.Body.Bytes()
	err = json.Unmarshal(res, &data)
	if err != nil {
		// Handle error
		t.Error("Error json converting:", err)
	}

	if http.StatusOK != w.Code {
		fmt.Println("Err Body", w.Body.String())
	}

	var role = migration.Role{}
	bootstrap.DB.Where("id = ?", data.Data).First(&role)

	TestRole.id = role.Id
	assert.Equal(t, http.StatusOK, w.Code)
	assert.Equal(t, "test", role.Name)
	assert.Equal(t, "test_role", role.Slug)
}

func TestUpdateRoleHttp(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	// Create a new multipart writer
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	// Add other fields
	_ = writer.WriteField("name", "test_new")
	_ = writer.WriteField("slug", "test_role")
	_ = writer.WriteField("rank", "1")
	_ = writer.WriteField("is_disabled", "1")
	_ = writer.WriteField("is_active", "0")

	// Close multipart writer
	err := writer.Close()
	if err != nil {
		t.Error("Error closing writer:", err)
	}

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("PATCH", "/v1/roles/"+strconv.Itoa(int(TestRole.id)), body)
	req.Header.Set("Content-Type", writer.FormDataContentType())
	req.Header.Set("X-Secret-Key", bootstrap.Env.App.Key)
	req.Header.Set("Authorization", TestRole.token.Token)
	bootstrap.Engine.ServeHTTP(w, req)

	type AutoGenerated struct {
		Data int `json:"data"`
	}

	var data AutoGenerated
	res := w.Body.Bytes()
	err = json.Unmarshal(res, &data)
	if err != nil {
		// Handle error
		t.Error("Error json converting:", err)
	}

	if http.StatusOK != w.Code {
		fmt.Println("Err Body", w.Body.String())
	}

	var role = migration.Role{}
	bootstrap.DB.Where("id = ?", strconv.Itoa(int(TestRole.id))).First(&role)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Equal(t, "test_new", role.Name)
	assert.Equal(t, false, role.IsActive.Bool)
}

func TestRoleBrowseHttp(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/roles", nil)
	req.Header.Set("X-Secret-Key", bootstrap.Env.App.Key)
	req.Header.Set("Authorization", TestRole.token.Token)
	bootstrap.Engine.ServeHTTP(w, req)

	if http.StatusOK != w.Code {
		fmt.Println("Err Body", w.Body.String())
	}
	assert.Equal(t, http.StatusOK, w.Code)
}
