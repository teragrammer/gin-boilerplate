package authentication_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gin-boilerplate/database/migration"
	"gin-boilerplate/internal/utilities"
	"gin-boilerplate/pkg"
	"gin-boilerplate/pkg/routes"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/assert/v2"
	"mime/multipart"
	"net/http"
	"net/http/httptest"
	"testing"
)

type TestAuthenticationModel struct {
	token string
}

var TestAuthentication = TestAuthenticationModel{}

func TestLoginHttp(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	// reset and delete test data
	username := "test"
	password := "ABC&abc&123456"
	bootstrap.DB.Where("username = ?", username).Delete(&migration.User{})

	// create a mock user
	hash, _ := utilities.Hash(password + bootstrap.Env.Security.HashSecret)
	bootstrap.DB.Create(&migration.User{Password: hash, Username: username, FirstName: "Test", RoleId: 1})

	// Create a new multipart writer
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	// Add other fields
	_ = writer.WriteField("username", username)
	_ = writer.WriteField("password", password)

	// Close multipart writer
	err := writer.Close()
	if err != nil {
		t.Error("Error closing writer:", err)
	}

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/login", body)
	req.Header.Set("Content-Type", writer.FormDataContentType())
	req.Header.Set("X-Secret-Key", bootstrap.Env.App.Key)
	bootstrap.Engine.ServeHTTP(w, req)

	type AutoGenerated struct {
		Credential struct {
			Id    int    `json:"id"`
			Token string `json:"token"`
		} `json:"credential"`
		User struct {
			Id int `json:"id"`
		} `json:"user"`
	}

	var data AutoGenerated
	res := w.Body.Bytes()
	err = json.Unmarshal(res, &data)
	if err != nil {
		// Handle error
		t.Error("Error json converting:", err)
	}

	TestAuthentication.token = data.Credential.Token

	if http.StatusOK != w.Code {
		fmt.Println("Err Body", w.Body.String())
	}
	assert.Equal(t, http.StatusOK, w.Code)
}

func TestLogoutHttp(t *testing.T) {
	var env = "test"
	var bootstrap = pkg.InitBoot("../../../env.json", &env)

	// Set Gin to Test mode
	gin.SetMode(gin.TestMode)

	// routes
	routes.V1Routes(bootstrap)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/logout", nil)
	req.Header.Set("X-Secret-Key", bootstrap.Env.App.Key)
	req.Header.Set("Authorization", TestAuthentication.token)
	bootstrap.Engine.ServeHTTP(w, req)

	if http.StatusOK != w.Code {
		fmt.Println("Err Body", w.Body.String())
	}
	assert.Equal(t, http.StatusOK, w.Code)
}
